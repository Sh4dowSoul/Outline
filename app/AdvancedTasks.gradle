import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.util.regex.Matcher
import java.util.regex.Pattern

def currentFlavor = getCurrentFlavor()

ext {
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

//Task to Prepare Template for Build Flavors
task prepareManifest(){
    def theme = ""
    def sourceDestination = "/src/main/kotlin/"
    switch (currentFlavor){
        case "light":
            theme = "outline"
            sourceDestination = "/src/main/kotlin/com/schnettler/outline"
            break
        case "dark":
            theme = "ethereal"
            sourceDestination = "/src/main/kotlin/com/schnettler/ethereal"
            break
    }

    //Prepare Manifest
    copy {
        from "/src/main/AndroidManifestTemplate.xml"
        into "/src/main/"
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [theme: theme])
        rename { String fileName ->
            fileName = "AndroidManifest.xml"
        }
    }
    //Prepare Source Files
    def kotlinDir = new File(getProjectDir(), "/src/main/kotlin/")
    kotlinDir.deleteDir()
    copy {
        from "/src/main/kotlinTemplates"
        into sourceDestination
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [theme: theme])
    }
}

// Task to Backup Assets
task backupAssets(dependsOn: prepareManifest) {
    if (shouldEncrypt()) {
        def source = new File(getProjectDir(), "/src/main/assets")
        def backup = new File(getProjectDir(), "/src/main/assets-temp")
        if (!backup.exists()) {
            println("Encryption - Moving Main Assets")
            source.renameTo(backup)
        }
        if (currentFlavor != ""){
            source = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets")
            backup = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
            if (!backup.exists()) {
                println("Encryption - Moving Flavor Assets")
                source.renameTo(backup)
            }
        }
    }
}

//Task to encrypt Assets
task encryptAssets(dependsOn: backupAssets ) {
    if (shouldEncrypt()) {
        //Get Files to Encrypt
        println("Encryption - Find Files to Encrypt")
        def list = []
        def source = new File(getProjectDir(), "/src/main/assets-temp")
        source.eachFileRecurse(FileType.FILES) { file ->
            list << file
        }
        if (currentFlavor != ""){
            source = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
            source.eachFileRecurse(FileType.FILES) { file ->
                list << file
            }
        }


        println("Encryption - Encrypting Files")
        list.each {
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
            SecretKey secret = new SecretKeySpec(KEY, "AES")
            IvParameterSpec iv = new IvParameterSpec(IV_KEY)

            cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
            FileInputStream fis = new FileInputStream(it)
            File outputFile = new File(it.getAbsolutePath().replace("assets-temp", "assets") + ".enc");
            outputFile.getParentFile().mkdirs();
            FileOutputStream fos = new FileOutputStream(outputFile)

            byte[] input = new byte[64]
            int bytesRead
            while ((bytesRead = fis.read(input)) != -1) {
                byte[] output = cipher.update(input, 0, bytesRead)
                if (output != null) {
                    fos.write(output)
                }
            }
            byte[] output = cipher.doFinal()
            if (output != null) {
                fos.write(output)
            }
            fis.close()
            fos.flush()
            fos.close()
        }
    }
}

gradle.buildFinished {
    println("Encryption - Cleanup")
    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp/")
    def normalAssets = new File(getProjectDir(), "src/main/assets")
    if (tempAssets.exists()) {
        //Delete Encrypted Files
        normalAssets.deleteDir()
        //Restore normal Files
        tempAssets.renameTo(normalAssets)
    }

    tempAssets = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
    normalAssets = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets")
    if (tempAssets.exists()) {
        //Delete Encrypted Files
        normalAssets.deleteDir()
        //Restore normal Files
        tempAssets.renameTo(normalAssets)
    }
}

//Task to get Current Flavor
def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return ""
    }
}