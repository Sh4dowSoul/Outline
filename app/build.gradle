import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext {
    SHOULD_ENCRYPT_ASSETS = true
    SUPPORTS_THIRD_PARTY_SYSTEMS = false

    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 27
        versionCode 27019
        versionName "Oreo MR - 16.5"

        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" +
                SUPPORTS_THIRD_PARTY_SYSTEMS
        resValue "bool", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
        resValue "string", "encryption_status", (shouldEncrypt() ? "onCompileVerify" : "false")

        ndk {
            moduleName "LoadingProcess"
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix ' - '+ ' (' + getDate() + ')'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        flavorDimensions "theme"
        productFlavors {
            dark{
                dimension "theme"
                applicationId "com.schnettler.ethereal"
            }
            light {
                dimension "theme"
                applicationId "com.schnettler.outline"
            }
            minimal {
                dimension "theme"
                applicationId "com.schnettler.minimal"
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.github.javiersantos:PiracyChecker:1.1'
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version") {
        transitive = true
    }
}
def currentFlavor = getCurrentFlavor()

task prepareManifest(){
    def theme = ""
    def sourceDestination = "/src/main/kotlin/"
    def signature = ""
    def key = ""
    switch (currentFlavor){
        case "light":
            theme = "outline"
            sourceDestination = "/src/main/kotlin/com/schnettler/outline"
            signature = "4HCxqmQusuzbTuviIAOxy2sLSBA="
            key = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAimxk6Y2nBBXgMVa3a4VlSfHGHka0FK9tHfNoBhKq25xEyjNtesQAp1d9e/XZ2lgthuXG2hnjmeIwBAVpD7C/DbRcThKhmYpQtJxf/8e5euMP2UIBy3J/g+ZyDOgrqhNzyrUjMiJ90qMuppHm1LRknHJfcgAIGsVB7c665BhzWSHRpzWYSTBbcuIM++PUcWjeiR5ktD0xliJDC+PUT0x/AZecVYzXfaG10vczwxGafYUwvT7nJF4+/7bJUUxkh9Bobt/zv1dqYBFqSe/XmRhMbj9AU8AXqJAvvsuGGAJOEVVQXQTc33GAhGmiDjZh4JewzHAqKThIZGRZP2DoHvkOZQIDAQAB"
            break
        case "dark":
            theme = "ethereal"
            sourceDestination = "/src/main/kotlin/com/schnettler/ethereal"
            signature = "tGQYWSO6wsgTs90QJwLNH6vSwbA="
            key = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArTRaZnE2hkleiuajs6R41Fpf8f+em2T4cogtzPQ6O7r4DqBnUtc48KiZE408o0gGQoB3hr9vwoNKblxxSWxowcF9crDagEcWE6sfzHdEx/tM3nrVvq8jJPYPbUOfRPsxrPV0DqLGMU2DlxCeOhMWCRGK0IEMjQSBXXo33fie0g8sQrx7PGiaR9E0rbjO2eK5l7TsU7o1AhpONl4ODMcxLEupUEk3P8NxohafPSdLv/hFAJHDxzkJZCpvaxETcCAz8VatODZIKylHiYQsd0aEeYvfOmfpvG7PMz4o7H5riv1XE30qFFH0NVKXlYtgbewmhbmw5sRIcxuHmVQXTkIzWwIDAQAB"
            break
    }

    //Prepare Manifest
    copy {
        from "/src/main/AndroidManifestTemplate.xml"
        into "/src/main/"
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [theme: theme])
        rename { String fileName ->
           fileName = "AndroidManifest.xml"
        }
    }
    //Prepare Source Files
    def kotlinDir = new File(getProjectDir(), "/src/main/kotlin/")
    kotlinDir.deleteDir()
    copy {
        from "/src/main/kotlinTemplates"
        into sourceDestination
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [theme: theme])
    }
    //Prepare C Files
    copy {
        from "/src/main/jni/LoadingProcessTemplate.c"
        into "/src/main/jni/"
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [theme: theme, signature : signature, key : key])
        rename { String fileName ->
            fileName = "LoadingProcess.c"
        }
    }
}

task backupAssets(dependsOn: prepareManifest) {
    if (shouldEncrypt()) {
        def source = new File(getProjectDir(), "/src/main/assets")
        def backup = new File(getProjectDir(), "/src/main/assets-temp")
        if (!backup.exists()) {
            println("Encryption - Moving Main Assets")
            source.renameTo(backup)
        }
        if (currentFlavor != ""){
            source = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets")
            backup = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
            if (!backup.exists()) {
                println("Encryption - Moving Flavor Assets")
                source.renameTo(backup)
            }
        }
    }
}

task encryptAssets(dependsOn: backupAssets ) {
    if (shouldEncrypt()) {
        //Get Files to Encrypt
        println("Encryption - Find Files to Encrypt")
        def list = []
        def source = new File(getProjectDir(), "/src/main/assets-temp")
        source.eachFileRecurse(FileType.FILES) { file ->
            list << file
        }
        if (currentFlavor != ""){
            source = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
            source.eachFileRecurse(FileType.FILES) { file ->
                list << file
            }
        }


        println("Encryption - Encrypting Files")
        list.each {
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
            SecretKey secret = new SecretKeySpec(KEY, "AES")
            IvParameterSpec iv = new IvParameterSpec(IV_KEY)

            cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
            FileInputStream fis = new FileInputStream(it)
            File outputFile = new File(it.getAbsolutePath().replace("assets-temp", "assets") + ".enc");
            outputFile.getParentFile().mkdirs();
            FileOutputStream fos = new FileOutputStream(outputFile)

            byte[] input = new byte[64]
            int bytesRead
            while ((bytesRead = fis.read(input)) != -1) {
                byte[] output = cipher.update(input, 0, bytesRead)
                if (output != null) {
                    fos.write(output)
                }
            }
            byte[] output = cipher.doFinal()
            if (output != null) {
                fos.write(output)
            }
            fis.close()
            fos.flush()
            fos.close()
            //it.delete()
        }
    }
}

task writeKeys {
    def KEY_READY = String.valueOf("\"" + KEY + "\"")
            .replace("\"", "")
            .replace("[", "{")
            .replace("]", "}")
    def IV_KEY_READY = String.valueOf("\"" + IV_KEY + "\"")
            .replace("\"", "")
            .replace("[", "{")
            .replace("]", "}")

    def headerFile = new File(getProjectDir(), "src/main/jni/LoadingProcess.h")
    headerFile.createNewFile()
    headerFile.text = """
#include <jni.h>
jbyte DECRYPTION_KEY[] = ${KEY_READY};
jbyte IV_KEY[] = ${IV_KEY_READY};
"""
}

project.afterEvaluate {
    preBuild.dependsOn prepareManifest
}



gradle.buildFinished {
    println("Encryption - Cleanup")
    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp/")
    def normalAssets = new File(getProjectDir(), "src/main/assets")
    if (tempAssets.exists()) {
        //Delete Encrypted Files
        normalAssets.deleteDir()
        //Restore normal Files
        tempAssets.renameTo(normalAssets)
    }

    tempAssets = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets-temp")
    normalAssets = new File(getProjectDir(), "/src/" + getCurrentFlavor() + "/assets")
    if (tempAssets.exists()) {
        //Delete Encrypted Files
        normalAssets.deleteDir()
        //Restore normal Files
        tempAssets.renameTo(normalAssets)
    }
}

boolean shouldEncrypt() {
    ArrayList<String> tasks = project.gradle.startParameter.taskNames
    return SHOULD_ENCRYPT_ASSETS && Arrays.toString(tasks).toLowerCase().contains("release")
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('dd.MM HH:mm')
    return formattedDate
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return ""
    }
}

repositories {
    mavenCentral()
}